import sys
import pandas as pd
import numpy as np
import joblib
from PySide6.QtWidgets import (
    QApplication, QWidget, QLabel, QComboBox,
    QPushButton, QVBoxLayout, QMessageBox
)
from datetime import datetime

# === –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π –∏ –ø—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤ ===
model = joblib.load('models/logistic_model.pkl')
scaler = joblib.load('models/scaler.pkl')
imputer = joblib.load('models/imputer.pkl')
encoder = joblib.load('models/encoder.pkl')
final_features = joblib.load('models/final_feature_order.pkl')

# === –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞ (–Ω—É–∂–µ–Ω –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞ —Å—Ç—Ä–æ–∫–∏) ===
full_data = pd.read_csv('data/processed_with_all_features.csv')
all_teams = sorted(set(full_data['HomeTeam'].unique()) | set(full_data['AwayTeam'].unique()))

class MatchPredictor(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("–ü—Ä–æ–≥–Ω–æ–∑ –º–∞—Ç—á–∞ –ê–ü–õ")

        self.home_label = QLabel("–î–æ–º–∞—à–Ω—è—è –∫–æ–º–∞–Ω–¥–∞")
        self.away_label = QLabel("–ì–æ—Å—Ç–µ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞")

        self.home_combo = QComboBox()
        self.away_combo = QComboBox()

        self.home_combo.addItems(all_teams)
        self.away_combo.addItems(all_teams)

        self.predict_btn = QPushButton("–°–¥–µ–ª–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑")
        self.predict_btn.clicked.connect(self.make_prediction)

        layout = QVBoxLayout()
        layout.addWidget(self.home_label)
        layout.addWidget(self.home_combo)
        layout.addWidget(self.away_label)
        layout.addWidget(self.away_combo)
        layout.addWidget(self.predict_btn)

        self.setLayout(layout)

    def make_prediction(self):
        home = self.home_combo.currentText()
        away = self.away_combo.currentText()

        # –ò–º–∏—Ç–∞—Ü–∏—è —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –º–∞—Ç—á–∞
        today = pd.to_datetime(datetime.today().strftime('%Y-%m-%d'))

        # –ò—â–µ–º –ø–æ—Ö–æ–∂—É—é –∏–≥—Ä—É –º–µ–∂–¥—É –∫–æ–º–∞–Ω–¥–∞–º–∏
        match_rows = full_data[
            (full_data['HomeTeam'] == home) & (full_data['AwayTeam'] == away)
        ]

        if match_rows.empty:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –º–µ–∂–¥—É —ç—Ç–∏–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏")
            return

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∏–≥—Ä—É –º–µ–∂–¥—É —ç—Ç–∏–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏
        row = match_rows.iloc[-1].copy()

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –∏ —Å–æ–∑–¥–∞—ë–º –ø—Ä–∏–∑–Ω–∞–∫–∏
        row['Date'] = today
        row['Year'] = today.year
        row['Month'] = today.month
        row['Day'] = today.day

        # –ö–æ–¥–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
        encoded = encoder.transform(pd.DataFrame([[home, away]], columns=['HomeTeam', 'AwayTeam']))
        row['HomeTeam_encoded'] = encoded['HomeTeam'].values[0]
        row['AwayTeam_encoded'] = encoded['AwayTeam'].values[0]

        # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏
        for col in ['FTR', 'HomeTeam', 'AwayTeam', 'Date']:
            if col in row:
                row.pop(col)

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ DataFrame
        X_df = pd.DataFrame([row])

        # –ò–º–ø—É—Ç–∞—Ü–∏—è ‚Üí –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
        X_imputed = imputer.transform(X_df)
        X_scaled = scaler.transform(X_imputed)

        # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω—É–∂–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        X_final = pd.DataFrame(X_scaled, columns=final_features)

        # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
        proba = model.predict_proba(X_final)[0]

        result_text = (
            f"üè† –ü–æ–±–µ–¥–∞ {home}: {round(proba[2], 2)}\n"
            f"ü§ù –ù–∏—á—å—è: {round(proba[1], 2)}\n"
            f"üõ´ –ü–æ–±–µ–¥–∞ {away}: {round(proba[0], 2)}"
        )

        QMessageBox.information(self, "–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞", result_text)

if __name__ == '__main__':
    app = QApplication(sys.argv)
    window = MatchPredictor()
    window.show()
    sys.exit(app.exec())
