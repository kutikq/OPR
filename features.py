import pandas as pd
from tqdm import tqdm

print("üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ...")
df = pd.read_csv("processed_with_b365_data.csv")

# ----------------------------
# 1. –ü–µ—Ä–µ–≤–æ–¥–∏–º Date –≤ datetime –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
# ----------------------------
print("\nüìÖ –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç–æ–ª–±–µ—Ü Date –≤ —Ñ–æ—Ä–º–∞—Ç datetime...")
df['Date'] = pd.to_datetime(df['Date'], errors='coerce')
df.sort_values(by='Date', inplace=True)
df.reset_index(drop=True, inplace=True)

# ----------------------------
# 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –º–∞—Ç—á–µ–π –∏ Elo-—Ä–µ–π—Ç–∏–Ω–≥–æ–≤
# ----------------------------
team_history = {}
elo_ratings = {}

# ----------------------------
# 3. –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ Elo-—Ä–µ–π—Ç–∏–Ω–≥–∞
# ----------------------------
def expected_score(elo_a, elo_b):
    return 1 / (1 + 10 ** ((elo_b - elo_a) / 400))

K = 32  # –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–∞–∂–Ω–æ—Å—Ç–∏ –º–∞—Ç—á–∞

def update_elo(winner_elo, loser_elo, draw=False):
    expected_win = expected_score(winner_elo, loser_elo)
    if draw:
        actual_win = 0.5
    else:
        actual_win = 1.0
    delta = K * (actual_win - expected_win)
    return winner_elo + delta, loser_elo - delta

# ----------------------------
# 4. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–∫–∏ –¥–ª—è –Ω–æ–≤—ã—Ö —Ñ–∏—á–µ–π
# ----------------------------

# –§–æ—Ä–º–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∞—Ç—á–µ–π
home_goals_scored_last5 = []
home_goals_conceded_last5 = []
home_win_rate_last5 = []

away_goals_scored_last5 = []
away_goals_conceded_last5 = []
away_win_rate_last5 = []

# –õ–∏—á–Ω—ã–µ –≤—Å—Ç—Ä–µ—á–∏
h2h_home_win_rate = []
h2h_away_win_rate = []
h2h_avg_goals_home = []
h2h_avg_goals_away = []

# –°—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ø–æ –≤—Å–µ–º –º–∞—Ç—á–∞–º
home_avg_goals_total = []
away_avg_goals_total = []
home_avg_goals_against_total = []
away_avg_goals_against_total = []

# Elo-—Ä–µ–π—Ç–∏–Ω–≥–∏ –¥–æ –º–∞—Ç—á–∞
home_elo_before = []
away_elo_before = []

# ----------------------------
# 5. –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–º—É –º–∞—Ç—á—É –∏ —Å–æ–±–∏—Ä–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
# ----------------------------
print("\nüìä –ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä —Ñ–∏—á–µ–π...")

for idx, row in tqdm(df.iterrows(), total=df.shape[0], desc="–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–∞—Ç—á–∏"):

    home_team = row['HomeTeam']
    away_team = row['AwayTeam']

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –∫–æ–º–∞–Ω–¥, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if home_team not in team_history:
        team_history[home_team] = []

    if away_team not in team_history:
        team_history[away_team] = []

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ Elo-—Ä–µ–π—Ç–∏–Ω–≥–∏
    home_elo = elo_ratings.get(home_team, 1500)
    away_elo = elo_ratings.get(away_team, 1500)

    home_elo_before.append(home_elo)
    away_elo_before.append(away_elo)

    # --- –§–æ—Ä–º–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∞—Ç—á–µ–π ---
    last_5_home = team_history[home_team][-5:]
    last_5_away = team_history[away_team][-5:]

    avg_gs_h = sum([m['scored'] for m in last_5_home]) / len(last_5_home) if last_5_home else 0
    avg_gc_h = sum([m['conceded'] for m in last_5_home]) / len(last_5_home) if last_5_home else 0
    wr_h = sum([1 for m in last_5_home if m['result'] == 'W']) / len(last_5_home) if last_5_home else 0

    avg_gs_a = sum([m['scored'] for m in last_5_away]) / len(last_5_away) if last_5_away else 0
    avg_gc_a = sum([m['conceded'] for m in last_5_away]) / len(last_5_away) if last_5_away else 0
    wr_a = sum([1 for m in last_5_away if m['result'] == 'W']) / len(last_5_away) if last_5_away else 0

    home_goals_scored_last5.append(avg_gs_h)
    home_goals_conceded_last5.append(avg_gc_h)
    home_win_rate_last5.append(wr_h)

    away_goals_scored_last5.append(avg_gs_a)
    away_goals_conceded_last5.append(avg_gc_a)
    away_win_rate_last5.append(wr_a)

    # --- –õ–∏—á–Ω—ã–µ –≤—Å—Ç—Ä–µ—á–∏ ---
    h2h_matches = [m for m in team_history[home_team] + team_history[away_team]
                   if (m['opponent'] == away_team and m['team'] == home_team) or
                      (m['opponent'] == home_team and m['team'] == away_team)]

    h2h_last_5 = h2h_matches[-5:]  # –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∞—Ç—á–µ–π –º–µ–∂–¥—É —Å–æ–±–æ–π

    h2h_wr_h = sum([1 for m in h2h_last_5 if m['team'] == home_team and m['result'] == 'W']) / len(h2h_last_5) if h2h_last_5 else 0
    h2h_wr_a = sum([1 for m in h2h_last_5 if m['team'] == away_team and m['result'] == 'W']) / len(h2h_last_5) if h2h_last_5 else 0

    h2h_goals_h = sum([m['scored'] for m in h2h_last_5 if m['team'] == home_team]) / len(h2h_last_5) if h2h_last_5 else 0
    h2h_goals_a = sum([m['scored'] for m in h2h_last_5 if m['team'] == away_team]) / len(h2h_last_5) if h2h_last_5 else 0

    h2h_home_win_rate.append(h2h_wr_h)
    h2h_away_win_rate.append(h2h_wr_a)
    h2h_avg_goals_home.append(h2h_goals_h)
    h2h_avg_goals_away.append(h2h_goals_a)

    # --- –°—Ä–µ–¥–Ω–∏–µ –≥–æ–ª—ã –ø–æ –≤—Å–µ–º –º–∞—Ç—á–∞–º ---
    all_home_games = team_history[home_team]
    all_away_games = team_history[away_team]

    avg_goals_home = sum([m['scored'] for m in all_home_games]) / len(all_home_games) if all_home_games else 0
    avg_goals_away = sum([m['scored'] for m in all_away_games]) / len(all_away_games) if all_away_games else 0

    avg_goals_against_home = sum([m['conceded'] for m in all_home_games]) / len(all_home_games) if all_home_games else 0
    avg_goals_against_away = sum([m['conceded'] for m in all_away_games]) / len(all_away_games) if all_away_games else 0

    home_avg_goals_total.append(avg_goals_home)
    away_avg_goals_total.append(avg_goals_away)
    home_avg_goals_against_total.append(avg_goals_against_home)
    away_avg_goals_against_total.append(avg_goals_against_away)

    # --- –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥ Elo ---
    result = row['FTR']

    if result == 'H':
        new_home, new_away = update_elo(home_elo, away_elo)
    elif result == 'A':
        new_away, new_home = update_elo(away_elo, home_elo)
    else:
        new_home, new_away = update_elo(home_elo, away_elo, draw=True)
        new_away, new_home = update_elo(away_elo, home_elo, draw=True)

    elo_ratings[home_team] = new_home
    elo_ratings[away_team] = new_away

    # --- –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ–∫—É—â–µ–≥–æ –º–∞—Ç—á–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é ---
    # –î–ª—è –¥–æ–º–∞—à–Ω–µ–π –∫–æ–º–∞–Ω–¥—ã
    team_history[home_team].append({
        'team': home_team,
        'opponent': away_team,
        'scored': row['HST'],     # <-- –ò—Å–ø–æ–ª—å–∑—É–µ–º HST –≤–º–µ—Å—Ç–æ FTHG
        'conceded': row['AST'],   # <-- –ò—Å–ø–æ–ª—å–∑—É–µ–º AST –≤–º–µ—Å—Ç–æ FTAG
        'result': 'W' if result == 'H' else 'L' if result == 'A' else 'D'
    })

    # –î–ª—è –≥–æ—Å—Ç–µ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã
    team_history[away_team].append({
        'team': away_team,
        'opponent': home_team,
        'scored': row['AST'],     # <-- –ì–æ—Å—Ç–∏ –∑–∞–±–∏–ª–∏ AST
        'conceded': row['HST'],   # <-- –ü—Ä–æ–ø—É—Å—Ç–∏–ª–∏ HST
        'result': 'W' if result == 'A' else 'L' if result == 'H' else 'D'
    })

# ----------------------------
# 6. –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Ñ–∏—á–∏ –≤ DataFrame
# ----------------------------

# –§–æ—Ä–º–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∞—Ç—á–µ–π
df['HomeTeam_AvgGoalsScoredLast5'] = home_goals_scored_last5
df['HomeTeam_AvgGoalsConcededLast5'] = home_goals_conceded_last5
df['HomeTeam_WinRateLast5'] = home_win_rate_last5

df['AwayTeam_AvgGoalsScoredLast5'] = away_goals_scored_last5
df['AwayTeam_AvgGoalsConcededLast5'] = away_goals_conceded_last5
df['AwayTeam_WinRateLast5'] = away_win_rate_last5

# –õ–∏—á–Ω—ã–µ –≤—Å—Ç—Ä–µ—á–∏
df['HeadToHead_HomeWinRate'] = h2h_home_win_rate
df['HeadToHead_AwayWinRate'] = h2h_away_win_rate
df['HeadToHead_HomeGoals'] = h2h_avg_goals_home
df['HeadToHead_AwayGoals'] = h2h_avg_goals_away

# –°—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ø–æ –≤—Å–µ–º –º–∞—Ç—á–∞–º
df['HomeTeam_GlobalAvgGoalsScored'] = home_avg_goals_total
df['HomeTeam_GlobalAvgGoalsConceded'] = home_avg_goals_against_total
df['AwayTeam_GlobalAvgGoalsScored'] = away_avg_goals_total
df['AwayTeam_GlobalAvgGoalsConceded'] = away_avg_goals_against_total

# Elo-—Ä–µ–π—Ç–∏–Ω–≥–∏
df['HomeTeam_Elo'] = home_elo_before
df['AwayTeam_Elo'] = away_elo_before

# ----------------------------
# 7. –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç
# ----------------------------
output_file = "processed_with_all_features.csv"
df.to_csv(output_file, index=False)

# ----------------------------
# 8. –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
# ----------------------------
print(f"\n‚úÖ –í—Å–µ —Ñ–∏—á–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª:")
print(f"üìÅ {output_file}")

print("\nüèÜ –ü—Ä–∏–º–µ—Ä Elo-—Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –Ω–∞ –∫–æ–Ω–µ—Ü –¥–∞—Ç–∞—Å–µ—Ç–∞:")
for team, rating in sorted(elo_ratings.items(), key=lambda x: x[1], reverse=True)[:10]:
    print(f"{team}: {rating:.1f}")

print("\nüìà –ü—Ä–∏–º–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ñ–∏—á–µ–π:")
print(df[[
    'Date',
    'HomeTeam',
    'AwayTeam',
    'FTR',
    'HomeTeam_AvgGoalsScoredLast5',
    'HomeTeam_WinRateLast5',
    'HeadToHead_HomeWinRate',
    'HeadToHead_HomeGoals',
    'HomeTeam_GlobalAvgGoalsScored',
    'HomeTeam_Elo'
]].head(3))